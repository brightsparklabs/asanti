/*
 * Maintained by brightSPARK Labs.
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

// We want to conditionally apply these plugins, therefore need to use legacy plugin syntax.
buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    // Apply the brightSPARK Labs plugin for standardisation.
    id 'com.brightsparklabs.gradle.baseline' version '4.9.0'

    // Apply the java plugin to add support for Java.
    id 'java'

    // Apply the application plugin to add support for building an application.
    id 'application'

    // Apply the library plugin to add support for exposing as a library.
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock).
    id 'groovy'

    // -----------------------------------------------------------------------------
    // PUBLISHING
    // -----------------------------------------------------------------------------

    id 'maven-publish'
    // Apply the JReleaser plugin to sign and deploy artifacts.
    // See https://jreleaser.org/guide/latest/tools/jreleaser-gradle.html
    id 'org.jreleaser' version '1.18.0'
}

// -----------------------------------------------------------------------------
// IMPORTS
// -----------------------------------------------------------------------------

apply from: 'startScripts.gradle'

import org.jreleaser.gradle.plugin.tasks.JReleaserDeployTask

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    def versions = [
        slf4j: "2.0.17",
    ]

    implementation(
            "com.google.guava:guava:33.4.8-jre",
            // Do not upgrade the following package unless you are updating the relevant Asanti parser classes.
            "org.bouncycastle:bcprov-jdk18on:1.80",
            "org.slf4j:slf4j-api:${versions.slf4j}",
            "joda-time:joda-time:2.14.0",
            "commons-cli:commons-cli:1.9.0",
            )

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.13.0',
            "org.mockito:mockito-inline:5.2.0",
            'org.hamcrest:hamcrest:3.0',
            "org.apache.groovy:groovy-all:4.0.27",
            "org.spockframework:spock-core:2.3-groovy-4.0",
            )

    testRuntimeOnly(
            "cglib:cglib-nodep:3.3.0",
            )

    runtimeOnly(
            "org.slf4j:slf4j-log4j12:${versions.slf4j}",
            )
}

// -----------------------------------------------------------------------------
// JAVA VERSION
// -----------------------------------------------------------------------------

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// -----------------------------------------------------------------------------
// VARIABLES
// -----------------------------------------------------------------------------

/** The directory to stage artifacts for publishing. */
def stagingDeployDir = layout.buildDirectory.dir('staging-deploy')

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = 'A dynamic ASN.1 Parser'
project.ext.url = 'https://github.com/brightsparklabs/asanti'
project.ext.scm = 'scm:git@github.com:brightsparklabs/asanti.git'

// -----------------------------------------------------------------------------
// CONFIGURE: ErrorProne
// -----------------------------------------------------------------------------

project.tasks.named("compileJava").configure {
    options.errorprone.disable("MissingSummary")
    options.errorprone.disable("JavaLangClash")
}

// -----------------------------------------------------------------------------
// CREATE START SCRIPTS (via application)
// -----------------------------------------------------------------------------

application {
    mainClass = 'com.brightsparklabs.asanti.AsantiCli'
}

// -----------------------------------------------------------------------------
// SETUP ARTIFACTS FOR PUBLISHING
// -----------------------------------------------------------------------------

// Maven Central requires javadoc and sources.
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java

            // Maven Central requires specific POM attributes.
            pom {
                name = project.name
                description = project.description
                url = project.url

                scm {
                    connection = project.scm
                    developerConnection = project.scm
                    url = project.scm
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'brightsparklabs'
                        name = 'brightSPARK Labs'
                        email = 'enquire@brightsparklabs.com'
                    }
                }
            }
        }
    }
    // Configure the staging directory to put all artifacts into prior to publishing to Maven
    // Central. To publish to a Maven repository, JReleaser must be configured to point to a staging
    // directory that contains all artifacts in Maven's default layout.
    repositories {
        maven {
            url = stagingDeployDir
        }
    }
}

// -----------------------------------------------------------------------------
// CONFIGURATION: org.jreleaser
// -----------------------------------------------------------------------------

// JReleaser plugin configuration.
jreleaser {
    // NOTE: Config is applied in this order: inline > env var.

    // Artifact signing configuration.
    // See https://jreleaser.org/guide/latest/reference/signing.html
    signing {
        // Enables or disables file signing.
        // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
        // Defaults to `NEVER`.
        active = 'ALWAYS'

        // Generates an armored signature.
        // Defaults to `false`.
        //
        // We set this to `true` to produce human-readable `.asc` signature files.
        // NOTE: Signing fails with "Unexpected error" when set to `false`.
        armored = true

        // Verify signature files.
        // If `false` then `publicKey` may be omitted.
        // Defaults to `true`.
        //
        // NOTE: Disabled because there's no need to verify signatures immediately after signing.
        // If we want to enable this in the future, we'll need to configure `publicKey` to our PGP
        // public key.
        verify = false

        // The passphrase required to read secret keys.
        // Set via env var `JRELEASER_GPG_PASSPHRASE`.
        //
        // NOTE: We set this using a project property. See
        // https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
        // NOTE: This raises an error if left blank, however this is a bug that should be fixed in
        // the 1.19.0 release. See https://github.com/jreleaser/jreleaser/issues/1883.
        passphrase = findProperty("signingPassword") ?: '__DUMMY_VALUE__'

        // The private GPG (ascii armored) used to sign files and commits.
        // Required when mode = `MEMORY` || `FILE`.
        // Set via env var `JRELEASER_GPG_SECRET_KEY`.
        //
        // NOTE: We set this using a project property. See
        // https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
        // NOTE: If set to a non-empty malformed value, signing will fail with "Unexpected error".
        secretKey = findProperty("signingKey")
    }

    // Artifact deployment configuration.
    deploy {
        // Deploy staged artifacts to target Maven compatible repositories.
        maven {
            // Deploy staged artifacts to Maven Central using the publisher API.
            // See https://jreleaser.org/guide/latest/reference/deploy/maven/maven-central.html
            mavenCentral {
                // The name of the deployer (deployers require a name).
                app {
                    // Enables or disables the deployer.
                    // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
                    // Defaults to `NEVER`.
                    active = 'ALWAYS'

                    // URL where the MavenCentral service is enabled.
                    url = 'https://central.sonatype.com/api/v1/publisher'

                    // The username required for authorization.
                    // Set via env var `JRELEASER_MAVENCENTRAL_USERNAME`.
                    //
                    // NOTE: We set this using a project property. See
                    // https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
                    username = findProperty("sonatypeUsername")

                    // Password for login into the MAVENCENTRAL service.
                    // Set via env var `JRELEASER_MAVENCENTRAL_PASSWORD`.
                    //
                    // NOTE: We set this using a project property. See
                    // https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
                    password = findProperty("sonatypePassword")

                    // The authorization method to use.
                    // Supported values are [`NONE`, `BASIC`, `BEARER`].
                    // `Basic` requires both username & password.
                    // `BEARER` requires a token (set as password).
                    // Defaults to `BEARER`.
                    //
                    // NOTE: This defaults to `BASIC` even though the documentation says otherwise.
                    // We explicitly set it to `BASIC` anyway to be certain.
                    authorization = 'BASIC'

                    // Signs artifacts with the configured credentials.
                    // The Signing section must be configured as well.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    // Signatures are output to `.asc` files in the staging directory.
                    //
                    // NOTE: This defaults to `true` even though the documentation says otherwise.
                    // We explicitly set it to `true` anyway to be certain.
                    sign = true

                    // Verifies that a matching `-sources.jar` artifact is staged.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    // NOTE: This defaults to `true` even though the documentation says otherwise.
                    // We explicitly set it to `true` anyway to be certain.
                    sourceJar = true

                    // Verifies that a matching `-javadoc.jar` artifact is staged.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    // NOTE: This defaults to `true` even though the documentation says otherwise.
                    // We explicitly set it to `true` anyway to be certain.
                    javadocJar = true

                    // Verifies that POM files comply with the minimum requirements for publication
                    // to Maven Central. Checks rules using PomChecker.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    // NOTE: This defaults to `true` even though the documentation says otherwise.
                    // We explicitly set it to `true` anyway to be certain.
                    verifyPom = true

                    // Verifies pom files, signs all artifacts, verifies that matching
                    // `-sources.jar` and `-javadoc.jar` artifacts are also staged.
                    // Defaults to `false`.
                    //
                    // NOTE: This defaults to `true` even though the documentation says otherwise.
                    // We explicitly set it to `true` anyway to be certain.
                    applyMavenCentralRules = true

                    // List of directories where staged artifacts can be found.
                    stagingRepository(stagingDeployDir.get().asFile.toString())
                }
            }
        }
    }

    // Release configuration.
    // NOTE: A single releaser must be configured. See
    // https://github.com/jreleaser/jreleaser/discussions/1725
    release {
        // See https://jreleaser.org/guide/latest/reference/release/github.html
        github {
            // Password or OAuth token with write access to the repository.
            //
            // NOTE: This value must be set else the `jreleaserConfig` task (useful for debugging)
            // will raise an error. See above note.
            token = '__DUMMY_VALUE__'

            // Skips creating a release.
            // Useful when release assets will be handled with an uploader.
            // Defaults to `false`.
            //
            // NOTE: We set this to `true` to disable all GitHub publishing behaviour.
            skipRelease = true
        }
    }
}

// -----------------------------------------------------------------------------
// TASKS
// -----------------------------------------------------------------------------

// Ensure artifacts are published to the staging directory before deploying to Maven Central.
tasks.withType(JReleaserDeployTask).configureEach { task ->
    // The `publish` task stages artifacts as per the `publishing` block configuration above.
    task.dependsOn publish
    // Do not let clean run after this task as that would blow away results.
    mustRunAfter clean
}

// Wrap our publishing logic in a custom task to decouple our CI/CD pipeline from the specific
// implementation.
tasks.register('publishToMavenCentral') {
    group 'brightSPARK Labs - Maven Central Publishing'
    description 'Publishes the release to Maven Central.'
    // Deploy artifacts using JReleaser.
    // See https://jreleaser.org/guide/latest/tools/jreleaser-gradle.html#_jreleaserdeploy
    dependsOn jreleaserDeploy
    // Do not let clean run after this task as that would blow away results.
    mustRunAfter clean
}

