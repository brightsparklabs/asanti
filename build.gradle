/*
 * Maintained by brightSPARK Labs.
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

// We want to conditionally apply these plugins, therefore need to use legacy plugin syntax.
buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
    }
}

plugins {
    // Apply the brightSPARK Labs plugin for standardisation.
    id 'com.brightsparklabs.gradle.baseline' version '1.0.0'

    // Apply the java plugin to add support for Java.
    id 'java'

    // Apply the application plugin to add support for building an application.
    id 'application'

    // Apply the library plugin to add support for exposing as a library.
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock).
    id 'groovy'

    // -----------------------------------------------------------------------------
    // PUBLISHING
    // -----------------------------------------------------------------------------

    id 'maven-publish'
    // Maven Central requires artifacts to be signed.
    id 'signing'
}

/*
 * Maven Central requires artifacts to be released via Sonatype Nexus.
 * The Nexus Publish Plugin can only be applied to the root project.
 * Do not apply it if this project is being included as a subproject.
 */
def isRootProject = project.path == ':'
if (isRootProject) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'
}

// -----------------------------------------------------------------------------
// IMPORTS
// -----------------------------------------------------------------------------

apply from: 'startScripts.gradle'

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    def versions = [
        powermock: "2.0.9",
        slf4j: "1.7.35"
    ]

    implementation "com.google.guava:guava:31.0.1-jre"
    implementation "org.bouncycastle:bcprov-jdk15on:1.70"
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "joda-time:joda-time:2.10.13"

    implementation "commons-cli:commons-cli:1.5.0"

    testImplementation 'junit:junit:4.13.2'

    testImplementation "org.powermock:powermock-api-mockito2:${versions.powermock}"
    testImplementation "org.powermock:powermock-module-junit4:${versions.powermock}"
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    testImplementation "org.codehaus.groovy:groovy-all:3.0.10"
    testImplementation "org.spockframework:spock-core:2.0-groovy-3.0"

    testRuntimeOnly "cglib:cglib-nodep:3.3.0"

    runtimeOnly "org.slf4j:slf4j-log4j12:${versions.slf4j}"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = 'A dynamic ASN.1 Parser'
project.ext.url = 'https://github.com/brightsparklabs/asanti'
project.ext.scm = 'scm:git@github.com:brightsparklabs/asanti.git'

// -----------------------------------------------------------------------------
// CONFIGURE: ErrorProne
// -----------------------------------------------------------------------------

project.tasks.named("compileJava").configure {
    options.errorprone.disable("MissingSummary")
    options.errorprone.disable("JavaLangClash")
}

// -----------------------------------------------------------------------------
// CREATE START SCRIPTS (via application)
// -----------------------------------------------------------------------------

mainClassName = 'com.brightsparklabs.asanti.AsantiCli'

// -----------------------------------------------------------------------------
// SETUP ARTIFACTS FOR PUBLISHING
// -----------------------------------------------------------------------------

// Maven Central requires javadoc and sources.
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java

            // Maven Central requires specific POM attributes.
            pom {
                name = project.name
                description = project.description
                url = project.url

                scm {
                    connection = project.scm
                    developerConnection = project.scm
                    url = project.scm
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'brightsparklabs'
                        name = 'brightSPARK Labs'
                        email = 'enquire@brightsparklabs.com'
                    }
                }
            }
        }
    }
}

// Maven Central requires signed artifacts.
signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava

    // Only require signing when publishing (otherwise normal builds would need GPG keys).
    required { gradle.taskGraph.hasTask("publishToSonatype") }
}

// -----------------------------------------------------------------------------
// PUBLISH ARTIFACTS (via nexus)
// -----------------------------------------------------------------------------

if (isRootProject) {
    nexusPublishing {
        repositories {
            // Credentials default to:
            // - Property `sonatypeUsername` or ENV variable `ORG_GRADLE_PROJECT_sonatypeUsername`.
            // - Property `sonatypePassword` or ENV variable ORG_GRADLE_PROJECT_sonatypePassword`.
            sonatype()
        }
    }

    task prePublishToMavenCentral {
        group 'brightSPARK Labs - Maven Central Publishing'
        description 'Stages the release on Sonatype ready for publishing to Maven Central.'
        dependsOn 'publishToSonatype', 'closeSonatypeStagingRepository'
    }
    task publishToMavenCentral {
        group 'brightSPARK Labs - Maven Central Publishing'
        description 'Publishes the release to Maven Central.'
        dependsOn 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository'
    }
}
